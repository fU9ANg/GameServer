package com.newman.tools;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.List;

import org.dom4j.DocumentException;

public class ToProtobufMessageFile {

	private static int _DEBUG = 1;

	public static boolean strIsNull(String str) {
		if (str == null || str.equals("")) {
			return true;
		}
		return false;
	}

	public static boolean writeFile(String fileName, Protocol proto) {

		File file = new File(fileName + proto.getName() + ".proto");

		FileWriter fw;
		BufferedWriter bw;

		try {
			if (!file.exists()) {
				file.createNewFile();
			}

			fw = new FileWriter(file.getAbsoluteFile());
			bw = new BufferedWriter(fw);

			// write content
			String commit = "// Generated by the automated builder tools.  DO NOT EDIT!\n";
			bw.write(commit);

			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			java.util.Date date = new java.util.Date();
			String strDate = sdf.format(date);
			if (!strIsNull(strDate)) {
				bw.write("// Build date: " + strDate + "\n\n\n");
			}

			String commentContent = proto.getComment();
			if (!strIsNull(commentContent)) {
				bw.write("// " + commentContent + "\n");
			}

			String packageName = proto.getPackagename();
			if (!strIsNull(packageName)) {
				bw.write("package " + packageName + ";\n");
			}
			String javaPackage = proto.getJava_package();
			if (!strIsNull(javaPackage)) {
				bw.write("option java_package = \"" + javaPackage + "\";\n");
			}
			String className = proto.getClassname();
			if (!strIsNull(className)) {
				bw.write("option java_outer_classname = \"" + className + "\";\n");
			}
			bw.write("\n\n");

			List<Struct> sl = proto.getList();
			for (Object obj : sl) {
				Struct s = (Struct) obj;
				String structComment = s.getComment();
				if (!strIsNull(structComment)) {
					bw.write("// " + structComment + "\n");
				}
				if (s.getType().equals("enum")) {
					bw.write("enum ");
				} else if (s.getType().equals("message")) {
					bw.write("message ");
				}

				String structName = s.getName();
				if (!strIsNull(structName)) {
					bw.write(structName + " {\n");
				}
				List<Field> fl = s.getFields();
				for (Object o : fl) {
					Field f = (Field) o;

					String fieldModifier = f.getModifier();
					if (!strIsNull(fieldModifier)) {
						bw.write("\t" + fieldModifier);
					}
					String fieldType = f.getType();
					if (!strIsNull(fieldType)) {
						bw.write("\t" + fieldType);
					}
					String fieldName = f.getName();
					if (!strIsNull(fieldName)) {
						bw.write("\t" + fieldName + "=");
					}
					String fieldValue = f.getValue();
					if (!strIsNull(fieldValue)) {
						bw.write(fieldValue + ";");
					}
					String fieldComment = f.getComment();
					if (!strIsNull(fieldComment)) {
						bw.write("\t// " + fieldComment + "\n");
					} else {
						bw.write("\n");
					}
				}
				bw.write("}\n\n");
			}

			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {

		}

		return true;
	}

	public static void main(String[] args) {

		Protocol protocol = new Protocol();
		boolean bool = false;
		try {
			bool = protocol.loadObjectFromXml("src/protocol.xml");
		} catch (DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if (!bool) {
			System.out.println("Error: loadObjectFromXml() function!");
			return;
		}

		if (!protocol.checkValid()) {
			System.out.println("Error: checkValid() function!");
			return;
		}

		if (_DEBUG == 1) {
			// DEBUG protocol.
			System.out.println("=========== protocol ===========");
			System.out.println("comment: " + protocol.getComment());
			System.out.println("name: " + protocol.getName());
			System.out.println("type: " + protocol.getType());
			System.out.println("packagename: " + protocol.getPackagename());
			System.out.println("java_package: " + protocol.getJava_package());
			System.out.println("classname: " + protocol.getClassname());

			List<Struct> sl = protocol.getList();
			for (int i = 0; i < sl.size(); i++) {
				System.out.println("\t=========== struct ===========");
				System.out.println("\tcomment: " + sl.get(i).getComment());
				System.out.println("\ttype: " + sl.get(i).getType());
				System.out.println("\tname: " + sl.get(i).getName());
				System.out.println("\tmainmessage: " + sl.get(i).getMainMessage());

				List<Field> fl = sl.get(i).getFields();
				for (int j = 0; j < fl.size(); j++) {
					System.out.println("\t\t=========== Field ===========");
					System.out.println("\t\tcomment: " + fl.get(j).getComment());
					System.out.println("\t\tmodifier: " + fl.get(j).getModifier());
					System.out.println("\t\ttype: " + fl.get(j).getType());
					System.out.println("\t\tname: " + fl.get(j).getName());
					System.out.println("\t\trefenumvalue: " + fl.get(j).getRefEnumValue());
					System.out.println("\t\tvalue: " + fl.get(j).getValue());
				}
			}
		}

		writeFile("/home/newman/", protocol);
	}

}
